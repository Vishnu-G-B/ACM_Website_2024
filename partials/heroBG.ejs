<section class="hero-container min-height" style="background-color: white">
    <div id="canvasParent" class="container-overflow-hidden min-height" style="background-color: white;">
        <canvas id="myCanvas"></canvas>
        <div class="heading title">
            <h1 class="landing-font" style="font-family:'Test' !important;" id="changingTitleLight">
                <%= title %>
            </h1>
        </div>
        <script defer>
            let title = document.getElementById("changingTitleLight");
            let screenWidth = window.innerWidth;
            if (screenWidth <= 479) {
                title.innerHTML = "ACM <br/> MITB" + "<br/>" + "STUDENT" + "<br/>" + "CHAPTER";
            }
        </script>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas')
        const c = canvas.getContext('2d')

        let mouseX
        let mouseY

        canvas.height = document.getElementById("canvasParent").clientHeight;
        canvas.width = document.getElementById("canvasParent").clientWidth;

        const canvasWidth = canvas.width
        const canvasHeight = canvas.height

        const maxRadius = 60

        canvas.onmousemove = function (e) {
            mouseX = e.clientX
            mouseY = e.clientY
        }

        window.addEventListener('resize', function () {
            canvas.height = document.getElementById("canvasParent").clientHeight;
            canvas.width = document.getElementById("canvasParent").clientWidth;
        })

        function Circle(xCoordinate, yCoordinate, radius) {
            const randomNumber = Math.floor(Math.random() * 4)
            const randomTrueOrFalse = Math.floor(Math.random() * 2)

            this.xCoordinate = xCoordinate
            this.yCoordinate = yCoordinate
            this.radius = radius
            this.color = colorArray[randomNumber]

            if (randomTrueOrFalse == 1) {
                this.xVelocity = -Math.random() * 1
            } else {
                this.xVelocity = Math.random() * 1
            }

            if (randomTrueOrFalse == 1) {
                this.yVelocity = -Math.random() * 1
            } else {
                this.yVelocity = Math.random() * 1
            }

            // As distance gets closer to 0, increase radius

            this.update = function () {
                this.xCoordinate += this.xVelocity
                const xDistance = mouseX - this.xCoordinate
                const yDistance = mouseY - this.yCoordinate
                const originalRadius = radius
                this.yCoordinate += this.yVelocity

                // Movement Functions
                if (
                    this.xCoordinate + this.radius > canvasWidth ||
                    this.xCoordinate - this.radius < 0
                ) {
                    this.xVelocity = -this.xVelocity
                }
                if (
                    this.yCoordinate + this.radius > canvasHeight ||
                    this.yCoordinate - this.radius < 0
                ) {
                    this.yVelocity = -this.yVelocity
                }

                // Radius Decrease Functions
                // When distance between circle center and mouse on horizontal axis is less than 50, increase radius until it is equal to 35
                if (
                    xDistance < 50 &&
                    xDistance > -50 &&
                    this.radius < maxRadius &&
                    yDistance < 50 &&
                    yDistance > -50
                ) {
                    this.radius += 2
                } else if (
                    (xDistance >= 50 && originalRadius < this.radius) ||
                    (xDistance <= -50 && originalRadius < this.radius) ||
                    (yDistance >= 50 && originalRadius < this.radius) ||
                    (yDistance <= -50 && originalRadius < this.radius)
                ) {
                    this.radius -= 2
                }

                this.draw()
            }

            this.draw = function () {
                //c.beginPath()
                //c.arc(
                //  this.xCoordinate,
                //  this.yCoordinate,
                //  Math.abs(this.radius),
                //  0,
                //  Math.PI * 2
                //)
                //c.fillStyle = this.color
                //c.fill()
                c.save(); // Save the current state of the context
                c.beginPath();
                c.translate(this.xCoordinate + this.radius / 2, this.yCoordinate + this.radius / 2); // Translate to the center of the square
                c.rotate((Math.PI / 180) * 45); // Rotate by 45 degrees (or any other desired angle)
                c.roundRect(-this.radius / 2, -this.radius / 2, Math.abs(this.radius), Math.abs(this.radius), Math.abs(this.radius / 4)); // Draw the square from the center
                c.fillStyle = this.color
                c.fill();
                //c.lineWidth = 10;
                //c.lineJoin = "round";
                //c.strokeStyle = this.color;
                //c.stroke();
                c.restore();
            }
        }

        const colorArray = ['#1d6bff', '#1d6bff', '#ff6725', '#ff6725']
        const myCircle = new Circle(30, 80, 10)
        let circleArray = []

        for (let i = 0; i < (canvasWidth <= 479 ? 200 : 900); i++) {
            const randomXCoordinate = Math.random() * canvasWidth
            const randomYCoordinate = Math.random() * canvasHeight
            const randomRadius = Math.random() * 12
            circleArray.push(
                new Circle(randomXCoordinate, randomYCoordinate, randomRadius)
            )
        }

        function updateAll() {
            c.clearRect(0, 0, canvasWidth, canvasHeight)
            myCircle.update()
            for (let i = 0; i < circleArray.length; i++) {
                circleArray[i].update()
            }
            window.requestAnimationFrame(updateAll)
        }

        updateAll()

    </script>
</section>